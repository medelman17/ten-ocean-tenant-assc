{
  "name": "10 Ocean Tenant Association Code Style",
  "description": "Code formatting and style guidelines for the 10 Ocean Tenant Association application",
  "rules": [
    {
      "name": "TypeScript Best Practices",
      "description": "TypeScript-specific coding standards",
      "pattern": {
        "locations": ["**/*.ts", "**/*.tsx"],
        "advices": [
          "Use explicit type annotations for function returns when not obvious",
          "Prefer interfaces over types for object definitions",
          "Use type guards to narrow types safely",
          "Use readonly modifier for immutable properties",
          "Use const assertions for literal values",
          "Use mapped and conditional types for advanced type transformations"
        ]
      }
    },
    {
      "name": "React Component Structure",
      "description": "Standards for React component organization",
      "pattern": {
        "locations": ["**/*.tsx"],
        "advices": [
          "Use functional components with hooks",
          "Define prop interfaces at the top of the file",
          "Place 'use client' directive at the very top of the file when needed",
          "Group related state hooks together",
          "Use custom hooks to share logic between components",
          "Handle errors and loading states gracefully",
          "Break large components into smaller, reusable pieces"
        ]
      }
    },
    {
      "name": "Import Order",
      "description": "Standard order for import statements",
      "pattern": {
        "locations": ["**/*.ts", "**/*.tsx"],
        "advices": [
          "Group imports in the following order:",
          "1. React and Next.js imports",
          "2. External libraries",
          "3. Internal modules (absolute paths)",
          "4. Component imports",
          "5. Type imports",
          "6. Asset imports",
          "7. Style imports",
          "Add a blank line between each group"
        ]
      }
    },
    {
      "name": "Function Style",
      "description": "Guidelines for function declarations and usage",
      "pattern": {
        "locations": ["**/*.ts", "**/*.tsx"],
        "advices": [
          "Use arrow functions for components and callbacks",
          "Declare async functions with proper return types",
          "Use early returns to reduce nesting",
          "Keep functions focused on a single responsibility",
          "Document complex functions with JSDoc comments",
          "Use descriptive function and parameter names"
        ]
      }
    },
    {
      "name": "Tailwind CSS Usage",
      "description": "Guidelines for Tailwind CSS implementation",
      "pattern": {
        "locations": ["**/*.tsx"],
        "advices": [
          "Group related Tailwind classes together (layout, typography, colors, etc.)",
          "Use the cn() utility for conditional class names",
          "Extract repeated class patterns into components",
          "Use design tokens from the theme configuration",
          "Maintain consistent spacing and sizing using Tailwind's scale",
          "Use responsive classes consistently (sm:, md:, lg:, etc.)"
        ]
      }
    },
    {
      "name": "Error Handling",
      "description": "Standards for error handling",
      "pattern": {
        "locations": ["**/*.ts", "**/*.tsx"],
        "advices": [
          "Use try/catch blocks for error-prone operations",
          "Provide meaningful error messages to users",
          "Log detailed errors for debugging",
          "Handle expected errors gracefully",
          "Implement error boundaries for component failures",
          "Use zod for validation to prevent runtime errors"
        ]
      }
    },
    {
      "name": "Comments and Documentation",
      "description": "Guidelines for code documentation",
      "pattern": {
        "locations": ["**/*.ts", "**/*.tsx"],
        "advices": [
          "Use JSDoc for public APIs and complex functions",
          "Document non-obvious code with inline comments",
          "Keep comments up-to-date with code changes",
          "Document workarounds and edge cases",
          "Write self-documenting code with clear variable and function names",
          "Document any assumptions or constraints"
        ]
      }
    },
    {
      "name": "Naming Conventions",
      "description": "Standards for naming variables, functions, and components",
      "pattern": {
        "locations": ["**/*.ts", "**/*.tsx"],
        "advices": [
          "Use PascalCase for React components and type names",
          "Use camelCase for variables, functions, and methods",
          "Use UPPERCASE_SNAKE_CASE for constants",
          "Use descriptive names that convey purpose",
          "Prefix boolean variables with 'is', 'has', 'should', etc.",
          "Use consistent naming patterns across the codebase"
        ]
      }
    },
    {
      "name": "CSS/Tailwind Organization",
      "description": "Guidelines for organizing CSS and Tailwind classes",
      "pattern": {
        "locations": ["**/*.tsx"],
        "advices": [
          "Group Tailwind classes in this order: layout, typography, colors, spacing, other",
          "Use consistent class ordering across components",
          "Extract common class patterns to components or utilities",
          "Use meaningful variable names for dynamic classes",
          "Keep responsive variants together for the same property",
          "Prefer Tailwind's built-in utilities over custom CSS"
        ]
      }
    },
    {
      "name": "Performance Considerations",
      "description": "Code patterns for optimizing performance",
      "pattern": {
        "locations": ["**/*.tsx", "**/*.ts"],
        "advices": [
          "Memoize expensive calculations with useMemo",
          "Optimize callback functions with useCallback",
          "Use proper dependency arrays for hooks",
          "Implement virtualization for long lists",
          "Use Next.js image optimization for images",
          "Minimize state updates and rerenders",
          "Use code splitting to reduce initial bundle size"
        ]
      }
    }
  ]
}