---
description: Type Safety Guidelines when working with supabase data
globs: 
alwaysApply: false
---
# Supabase Type Safety and Case Transformation Standard

## Description
This standard outlines how to maintain type safety and handle the `snake_case` (database) vs `camelCase` (application) convention difference when working with Supabase in TypeScript.

## The Conflict: Snakes vs Camels

Supabase stores data with `snake_case` column names (`user_id`), while our application code uses `camelCase` (`userId`). This requires consistent data transformation.

## Solution: Types and Transformation Utilities

Use separate TypeScript types and dedicated transformation functions:

1.  **Raw Database Types (Snake Case):** Types generated directly from your Supabase schema using the Supabase CLI (`supabase gen types typescript --schema public > types/supabase.ts`). These define the `snake_case` data shape *as it is in the DB*.

2.  **Application Types (Camel Case):** Types defined in your application code that reflect the `camelCase` shape needed for frontend components and business logic. Use type helpers like `ToCamelCase` from your `lib/utils/case-transforms.ts` to derive these from Raw types.

3.  **Transformation Functions:** Utilize `toCamelCase` (DB -> App) and `toSnakeCase` (App -> DB) from `lib/utils/case-transforms.ts` to handle the key mapping.

## Rules for Data Handling

*   **Reading Data (DB to App):**
    *   Fetch data from Supabase. The initial result will conform to the Raw (snake_case) types.
    *   Immediately apply `toCamelCase()` to the fetched data.
    *   All subsequent application logic and frontend code should work with the `camelCase` output.
    ```typescript
    import { toCamelCase } from 'lib/utils/case-transforms';
    // Assume DatabaseRowType is generated snake_case type
    // Assume ApplicationType is camelCase derived type

    const { data, error } = await supabase // ... fetch ...
    if (error) throw error; // handle error

    const applicationData: ApplicationType[] = toCamelCase(data || []);
    // Use applicationData (now camelCase)
    ```

*   **Writing Data (App to DB):**
    *   Receive or prepare data in your application logic using `camelCase` types.
    *   Apply `toSnakeCase()` to the data just before sending it to Supabase for inserts or updates.
    *   Send the resulting `snake_case` data to Supabase.
    ```typescript
    import { toSnakeCase } from 'lib/utils/case-transforms';
    // Assume applicationInputData is type ApplicationInputType (camelCase)

    const databasePayload = toSnakeCase(applicationInputData);
    // databasePayload now has snake_case keys

    const { data, error } = await supabase.from("table_name").insert(databasePayload);
    if (error) throw error; // handle error
    ```

## The `.cursor` Rule: Localize Snakes

**Principle:** `snake_case` data and types should be confined to the data access layer (where you directly interact with Supabase).

*   Raw (snake_case) types are used primarily as input/output for `toCamelCase`/`toSnakeCase`.
*   All code outside the direct data fetch/save logic must use `camelCase` data and types.

This pattern creates a clear boundary, centralizes transformation logic, and prevents `snake_case` from polluting the application's core, which simplifies development and makes LLM assistance more reliable.